// Dosya Yolu: backend/src/middleware/errorHandler.js

/**
 * Merkezi Hata YÃ¶netimi Middleware'i.
 * Express'te bir route handler'da 'next(error)' Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda bu fonksiyon tetiklenir.
 * TÃ¼m hatalarÄ± tek bir yerden yÃ¶neterek kod tekrarÄ±nÄ± Ã¶nler ve tutarlÄ± yanÄ±tlar saÄŸlar.
 */
const errorHandler = (err, req, res, next) => {
    // HatanÄ±n durum kodunu belirle. EÄŸer hatada bir statusCode belirtilmemiÅŸse,
    // bu bir sunucu hatasÄ±dÄ±r, 500 (Internal Server Error) kullan.
    const statusCode = err.statusCode || 500;

    // HatanÄ±n mesajÄ±nÄ± belirle.
    const message = err.message || 'Sunucuda beklenmedik bir hata oluÅŸtu.';

    // GeliÅŸtirme ortamÄ±ndaysak, hatanÄ±n tamamÄ±nÄ± konsola yazdÄ±r.
    // Bu, debug iÃ§in Ã§ok Ã¶nemlidir.
    if (process.env.NODE_ENV !== 'production') {
        console.error('HATA YAKALANDI ğŸ’¥:', err);
    }

    // KullanÄ±cÄ±ya standart bir formatta hata yanÄ±tÄ± gÃ¶nder.
    // Production ortamÄ±nda, gÃ¼venlik nedeniyle hatanÄ±n teknik detaylarÄ±nÄ± (stack trace)
    // kullanÄ±cÄ±ya asla gÃ¶ndermeyiz. Sadece mesajÄ± gÃ¶ndeririz.
    res.status(statusCode).json({
        success: false,
        statusCode: statusCode,
        message: message,
        // Production'da deÄŸilsek, debug iÃ§in stack trace'i ekleyebiliriz.
        stack: process.env.NODE_ENV === 'production' ? undefined : err.stack
    });
};

module.exports = errorHandler;